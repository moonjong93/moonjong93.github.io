<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-01-21T14:14:38+09:00</updated><id>/</id><title type="html">MoongJong93</title><subtitle>웹 개발에 관한 이야기, Node.js와 Vue.js를 중점적으로 사용합니다</subtitle><entry><title type="html">노트북 거치대를 구매햇다</title><link href="/life/new-laptop-stnad" rel="alternate" type="text/html" title="노트북 거치대를 구매햇다" /><published>2018-01-21T00:00:00+09:00</published><updated>2018-01-21T00:00:00+09:00</updated><id>/life/new-laptop-stnad</id><content type="html" xml:base="/life/new-laptop-stnad">&lt;p&gt;일본에 와서 좋은점은 아마도 한국과는 다르게 직접 가서 사는것과 인터넷으로 주문하는게 그렇게 큰 차이가 나지 않기에 오프라인에서도 편하게 구매 할 수 있다는 점이다.&lt;/p&gt;

&lt;p&gt;기존에 쓰던 노트북 거치대는 처음에 살땐 정말 괜찮아 보였다.
&lt;img src=&quot;/assets/img/postsImg/nextstand/1.jpeg&quot; alt=&quot;개봉사진&quot; /&gt;
각도 조절도 가능하고 무엇보다 튼튼하다는 생각이 들었고 한국에서도 잘 사용했다, 그러나 이것은 내가 평소에는 데스크탑을 사용하고 정말 가끔 노트북을 사용할때 이야기 였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/postsImg/nextstand/2.jpeg&quot; alt=&quot;개봉사진&quot; /&gt;
일본에서 자취중인 지금은 책상이 예전과는 1/3도 안되는 수준 때문에 키보드의 자리가 남지않아 손목이 아파왔다 하루 10시간이 넘게 노트북을 바라보고 있는 입장에서 손목만 아프면 다행이겠지만 점점 목이 아파져오고 있었다.&lt;/p&gt;

&lt;p&gt;인터넷을 검색 하던중 괜찮은 거치대를 발견했다.&lt;/p&gt;

&lt;p&gt;오사카 덴덴타운을 돌아다닌 덕에 하나 구매를 할 수있었다.
바로 NEXT STAND의 제품인데 한국 돈으로 약 2만원에 구매 할 수 있었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/postsImg/nextstand/3.jpeg&quot; alt=&quot;개봉사진&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2만원의 가격을 가진 패키지 치고는 나름 깔끔하게 포장이 잘 되어있었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/postsImg/nextstand/4.jpeg&quot; alt=&quot;개봉사진&quot; /&gt;&lt;/p&gt;

&lt;p&gt;파우치가 함께 동봉되어 있다 제품의 무게는 약 500g이라는데 체감은 더 가볍게 느껴진다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/postsImg/nextstand/5.jpeg&quot; alt=&quot;개봉사진&quot; /&gt;&lt;/p&gt;

&lt;p&gt;제품의 옆면 약해보이는 느낌이 강했지만 직접 만져보면 튼튼하다는 생각이 들었다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/postsImg/nextstand/6.jpeg&quot; alt=&quot;개봉사진&quot; /&gt;&lt;/p&gt;

&lt;p&gt;실제 거치대 위에 노트북을 올려놨을때 느낌 상당히 편하다 작업 공간도 많이 늘어났다 손목도 안아프고 목도 안아프다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/postsImg/nextstand/7.jpeg&quot; alt=&quot;개봉사진&quot; /&gt;&lt;/p&gt;

&lt;p&gt;옆으로 조금만 넘어가도 떨어질것 같아 보이지만 오히려 그렇지 않다 지렛대의 원리로 쎄개 잡아주고 밑에는 스프링으로 잡아주기에 안전하다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/postsImg/nextstand/9.jpeg&quot; alt=&quot;개봉사진&quot; /&gt;
테스트를 해보고자 약 90도 까지 돌려봤지만 전혀 흔들림도 없었다 처음 노트북을 올릴때 ‘딱’소리가 나는데 아마 그 덕분인듯 하다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/postsImg/nextstand/8.jpeg&quot; alt=&quot;개봉사진&quot; /&gt;&lt;/p&gt;

&lt;p&gt;높이도 조절이 가능하다 나는 가장 높은위치에서 1단계 낮은 단계를 사용한다.&lt;/p&gt;

&lt;p&gt;방금 사와서 바로 작성하기에 아직은 정확히 모르지만 지금 잠깐 글을 쓰며 사용하면서 느끼는거지만 목이 정말 편하다&lt;/p&gt;</content><author><name></name></author><category term="일상" /><category term="지름" /><summary type="html">일본에 와서 좋은점은 아마도 한국과는 다르게 직접 가서 사는것과 인터넷으로 주문하는게 그렇게 큰 차이가 나지 않기에 오프라인에서도 편하게 구매 할 수 있다는 점이다.</summary></entry><entry><title type="html">개발은 어떻게 하는 것인가?</title><link href="/life/how-to-develop" rel="alternate" type="text/html" title="개발은 어떻게 하는 것인가?" /><published>2018-01-18T00:00:00+09:00</published><updated>2018-01-18T00:00:00+09:00</updated><id>/life/how-to-develop</id><content type="html" xml:base="/life/how-to-develop">&lt;h2 id=&quot;컴공인의-질문&quot;&gt;컴공인의 질문&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;야 이번에 게임 만드는데 오브젝트 풀 설계 안해도 되지?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;당연히 해야한다고 대답했다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;어떻게 하는지 팁좀&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;일단 니가 만드려는 오브젝트의 사용 추산값부터 만들고 for문으로 일단 만들어놓고 그리고 setActive()로만 관리해&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;그니까 그걸 어떻게 짜는데?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그렇다 모른다 그가 알고있는 지식은 오브젝트 풀이라는 것을 사용하면 좋다라는 것 뿐… 상당히 갑갑해져 왔다 굳이 필요성을 모른다면 사용할 필요가 어디에 있겠는가??&lt;/p&gt;

&lt;p&gt;그래서 일단은 오브젝트 풀이니 뭐니 생각도 하지말고 일단은 만들고 그 다음에 최적화를 고민하라고 얘기해주었다.&lt;/p&gt;

&lt;p&gt;나름 괜찮은 결과물을 만든 친구는 나에게 다시 질문해왔다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;야 이거 근데 가끔 보면 멈출때 있는데 어떻게 해야하냐?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;그렇다면 너는 오브젝트 풀링이야^^&lt;/p&gt;

&lt;h2 id=&quot;왜-모를까&quot;&gt;왜 모를까?&lt;/h2&gt;
&lt;p&gt;사실 나 역시도 고등학교를 전문계고를 나오면서 학교에서 정말 줄기차게 for if switch문을 해왔다. 그러나 왜 하는지도 모르고 그냥 했다 선생님이 치라는대로 치니까 구구단이 만들어졌고 그리고 가위바위보가 만들어졌다.&lt;/p&gt;

&lt;p&gt;나는 수동적인 학생이었으며 별로 탐구하기를 좋아하는 학생도 아니었다 가끔 친구가 headfirst java라는 책을 가지고와 나에게 빌려주었지만 그냥 이게 뭔지 모르고 뚫어져라 쳐다만 봤고 그게 전부였다 ‘아무 의미 없었다’&lt;/p&gt;

&lt;p&gt;왜냐면 나는 이것을 어디다 써먹는지 도통 몰랐기 때문이다.&lt;/p&gt;

&lt;p&gt;그런점에서 생활코딩의 이고잉님이 존경스럽다 나를 웹 개발자로 입문 시켜준 강좌이기도 하다 상당히 깊은 교육이라기 보다는 어느정도 물고기를 잡는법을 알려주는 그의 교육방식은 우리가 앞으로 지향 해야할 교육의 방향이라고 확신을 갖게한다.&lt;/p&gt;

&lt;p&gt;그러나 애석하게도 모든 사람이 프로그래밍에 재능이 있는 것은 아니다, 같은 출발선상 그리고 같은 교육으로 배워도(열의도 똑같다는 가정하에) 결과는 분명히 다르다&lt;/p&gt;

&lt;p&gt;그런 일로 하여금 나는 가끔 내 자신을 자책하고 대가리가 굳어서 크흠…. 아무튼 그런 생각까지 하게 되었다 그렇게 프로그래밍을 손에 놓으려던 찰나 예전에 사놓고 읽지도 않은 ‘c#이 보이는 그림책’이라는 책이 눈에 보였는데 그제서야 내가 무엇을 실수한지 알 수 있었다.&lt;/p&gt;

&lt;p&gt;나는 학원에 다니며 강사의 코드를 그냥 따라 친거지 별로 생각없이 쳣기 때문이다.&lt;/p&gt;

&lt;h2 id=&quot;그래서-어떡하라고&quot;&gt;그래서 어떡하라고&lt;/h2&gt;
&lt;p&gt;이번에도 다시금 느끼게 되었다 ‘내가 필요한 프로그래밍의 중요성을’ 나는 이번에 리액트에 입문하며 간단한 프로젝트를 준비중이다 누구나 만드는 TODO앱의 한 종류인데 나도 그 중 하나를 끼얹고 싶어서 그리고 간단해 보여서 만들기로 했다.&lt;/p&gt;

&lt;p&gt;첫 시작은 local state를 사용해서 만들었다. 그러나 컴포넌트는 최대한 쪼개서 사용하려고 노력했다.&lt;/p&gt;

&lt;p&gt;그리고 점차 만들어가면 갈수록 정말 복잡하기 그지없었다, 메인 컴포넌트에서 자식 컴포넌트에게 함수를 정의해주고 그 함수를 받거나 props를 받은 차일드 컴포넌트는 그 데이터를 활용하고 그 자식의 자식의 자식의 자식의…&lt;/p&gt;

&lt;p&gt;react를 포기해야한다고 생각했다 왜냐면 너무 복잡하게 얽힌 실 같아서 어떻게 할 엄두가 안났다.&lt;/p&gt;

&lt;p&gt;그렇게 생각해낸 방법이 redux이다 난 사실 redux를 한 10시간은 넘게 공부했을 것이다, 그러나 이 10시간 보다 내가 정말 필요한 부분에 사용하기 위해서 배운 redux는 약 1시간 정도 밖에 안되지만 정말 신기하게 redux가 이해되었다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;그러니까 자기 프로젝트를 뭐라도 만들어서 하라고 그리고 벽에 부딪히라고 얘기해주고 싶다&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><category term="일상" /><category term="개발" /><summary type="html">컴공인의 질문 야 이번에 게임 만드는데 오브젝트 풀 설계 안해도 되지?</summary></entry><entry><title type="html">해피해킹 키보드 개봉기</title><link href="/life/I-buy-the-hhkb-keyboard" rel="alternate" type="text/html" title="해피해킹 키보드 개봉기" /><published>2018-01-13T00:00:00+09:00</published><updated>2018-01-13T00:00:00+09:00</updated><id>/life/I-buy-the-hhkb-keyboard</id><content type="html" xml:base="/life/I-buy-the-hhkb-keyboard">&lt;h2 id=&quot;왜-해피해킹인가&quot;&gt;왜 해피해킹인가?&lt;/h2&gt;
&lt;p&gt;사실 별다른 이유는 없었다 그러나 이전에 레오폴드의 fc660m을 써본 경험이 있었다 그때도 해피해킹을 구매하고 싶었지만 너무 비싼 가격탓에 구매를 할 수 없었다,&lt;/p&gt;

&lt;p&gt;그러던 중 일본으로 워킹홀리데이를 오게되었는데 원래는 도착하자마자 구매하고 싶었지만 여태 미루다가 드디어 구매하게 되었다.&lt;/p&gt;

&lt;h2 id=&quot;어디서&quot;&gt;어디서?&lt;/h2&gt;
&lt;p&gt;구매는 사실 고민을 많이했다 아마존에서 약 2만4천엔에 판매하고 있고 내 기억이 맞다면 직접 빅카메라에서 구매한다면 조금더 비쌋다고 생각했다 그러나 오늘 샤워를 하다가 언제까지 사고싶은걸 미룰텐가..라는 생각이 들어서 그냥 씻고 나와서 구매하게 되었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;결정을 내린건 불과 30분도 되지 않았다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;금액은 약 18,772엔에 구매하게 되었다 한국돈으로 약 18만원에 육박하는데(네이버 환율 기준) 내 국민카드에선 약 18만4천원이 빠져나갔으니 얼추 수수료가 약 4천원이 빠져나간 셈이다 물론 일본돈으로 구매했다면 그렇지 않았겟지만&lt;/p&gt;

&lt;p&gt;내가 갔던 빅카메라는 visa카드 구매시 약 5%의 할인을 해주고 있었기에 망설이지 않고 구매하게 되었다. 만약 구매 예정을 하고 있다면 꼭 비자 카드와 함께 여권을 가져가시길…&lt;/p&gt;

&lt;h2 id=&quot;개봉기&quot;&gt;개봉기&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/postsImg/happy-hacking/1.jpeg&quot; alt=&quot;개봉사진1&quot; /&gt;
박스&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/postsImg/happy-hacking/2.jpeg&quot; alt=&quot;개봉사진2&quot; /&gt;
개봉후&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/postsImg/happy-hacking/3.jpeg&quot; alt=&quot;개봉사진3&quot; /&gt;
옆면&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/postsImg/happy-hacking/4.jpeg&quot; alt=&quot;개봉사진4&quot; /&gt;
앞면&lt;/p&gt;

&lt;p&gt;무각으로 할지 그리고 흰색으로 할지 고민을 많이했는데 어차피 때탈거 같아서 검정색으로 구매하게 되었다 해당 매장에는 아쉽게도 블루투스가 모델이 없어서 비교해보기는 어려웠다 어차피 집에 두고 쓸거라 크게 염두하지 않았지만 아쉬움이 남는다&lt;/p&gt;

&lt;h2 id=&quot;초기세팅&quot;&gt;초기세팅&lt;/h2&gt;
&lt;p&gt;나는 해피해킹을 맥에서 쓰고있기에 아래와 같이 사용하고 있다
&lt;img src=&quot;/assets/img/postsImg/happy-hacking/5.jpeg&quot; alt=&quot;해피해킹 스위치&quot; /&gt;
옆면&lt;/p&gt;

&lt;p&gt;2번 3번만 켜두어서 딜리트키가 백스페이스로 작동하며 그 외에는 기존에 사용하던 맥의 키보드와는 다를게 없어서 상당히 편하다&lt;/p&gt;

&lt;p&gt;##어른 에게도 선물이 필요하다
근 1년동안은 거의 내게는 선물을 하지 않고 살았던것 같다 간만에 나에게 선물을 해주니 작업 의욕도 높아지고 좋다&lt;/p&gt;

&lt;p&gt;다음달에는 팜프레스를…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/postsImg/happy-hacking/6.jpeg&quot; alt=&quot;실제 사용모습&quot; /&gt; 아무튼 이것으로 짧은 개봉기를 마칩니당&lt;/p&gt;</content><author><name></name></author><category term="해피해킹" /><category term="키보드" /><summary type="html">왜 해피해킹인가? 사실 별다른 이유는 없었다 그러나 이전에 레오폴드의 fc660m을 써본 경험이 있었다 그때도 해피해킹을 구매하고 싶었지만 너무 비싼 가격탓에 구매를 할 수 없었다,</summary></entry><entry><title type="html">Redux 입문 정리</title><link href="/study/react/first-learn-redux" rel="alternate" type="text/html" title="Redux 입문 정리" /><published>2018-01-11T00:00:00+09:00</published><updated>2018-01-11T00:00:00+09:00</updated><id>/study/react/first-learn-redux</id><content type="html" xml:base="/study/react/first-learn-redux">&lt;h2 id=&quot;udemy-강좌를-보고&quot;&gt;Udemy 강좌를 보고&lt;/h2&gt;
&lt;p&gt;상당히 어렵다 아니 사실 어느정도의 흐름은 알겠는데 ‘정말로 필요해! 무조건 있어야해’라는 생각은 들지 않았다.&lt;/p&gt;

&lt;h2 id=&quot;redux는-스테이트-컨테이너이다&quot;&gt;Redux는 스테이트 컨테이너이다&lt;/h2&gt;
&lt;p&gt;데이터를 담당하는 모든 부분을 맡는다 거기다가 Action까지 관리하게 되는데 사실 데이터를 담당하는거 까지는 쉽게 이해했지만 Actions을 관리한다니..크흠 이게 가장 이해가 안되고있는 부분이다.&lt;/p&gt;

&lt;p&gt;그동안 당연히 모든 이벤트를 한 컴포넌트에서 관리하던 것과는 달리 Action을 담당하는 파일이 하나가 있고 또 데이터만을 담는 곳이 따로있는데 이해하려면 시간이 조금 걸릴듯 하다&lt;/p&gt;

&lt;h2 id=&quot;메인-컴포넌트는-가벼워진다&quot;&gt;메인 컴포넌트는 가벼워진다&lt;/h2&gt;
&lt;p&gt;그렇다 데이터와 이벤트를 전부 Conatiner 컴포넌트 안에서 관리하고 이런 이벤트를 전부 reducers나 actions에서 관리하기에 이 프로젝트의 최상위 컴포넌트인 app.js는 가벼워진다&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;왜 리액트에서 Redux가 필수인지 약간은 느끼게 되었다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;신기한-es6&quot;&gt;신기한 es6&lt;/h2&gt;
&lt;p&gt;그전 까지 바닐라 스크립트로만 작성을 했던 탓에 es6는 생각보다 신기하다.&lt;/p&gt;

&lt;p&gt;function을 생성할때 function(state = null) 이라고 한다면 처음 생성될때 null로 생성할 수 있다는 부분도 신기하다.&lt;/p&gt;

&lt;h2 id=&quot;어이없는-실수&quot;&gt;어이없는 실수&lt;/h2&gt;
&lt;p&gt;es6 문법에 익숙하지 않은 탓에 어이없는 실수로 시간을 허비했는데 action을 담당하는 스크립트에선 export default가 아닌 export로 해당 함수를 내보냈다 나는 당연히 ‘export하면 default지!’라는 생각에 export default fetchWeather라고 했는데 크흠.. 이 부분을 찾는데 시간을 해맷다.&lt;/p&gt;

&lt;h2 id=&quot;솔직히-모르겠다&quot;&gt;솔직히 모르겠다!!!&lt;/h2&gt;
&lt;p&gt;하면 할 수록 드는 생각은 웹은 Vue..로..그리고 네이티브 앱은 react native로 해야지… 라는 생각이 든다 물론 아직 개발 플로우를 전혀 익히지 않은 탓도 있고 내 개인 프로젝트를 하지 않아서 그런것도 있지만 쉬운 프레임워크는 아니라고 생각한다.&lt;/p&gt;

&lt;p&gt;물론 그렇다고 Vue가 마냥 쉬운것은 아니다 Vue도 초반엔 엄청 쉽다가 결국은 데이터 관리 부분에서 React와 같은 어려움을 맞이하는데&lt;/p&gt;

&lt;p&gt;React는 React를 입문하자 마자 이런 산을 만나니 조금 더 어렵다고 생각이 드는것 같다&lt;/p&gt;</content><author><name></name></author><category term="Redux" /><category term="Learn" /><summary type="html">Udemy 강좌를 보고 상당히 어렵다 아니 사실 어느정도의 흐름은 알겠는데 ‘정말로 필요해! 무조건 있어야해’라는 생각은 들지 않았다.</summary></entry><entry><title type="html">리액트 입문 정리</title><link href="/study/react/first-react-learn" rel="alternate" type="text/html" title="리액트 입문 정리" /><published>2018-01-10T00:00:00+09:00</published><updated>2018-01-10T00:00:00+09:00</updated><id>/study/react/first-react-learn</id><content type="html" xml:base="/study/react/first-react-learn">&lt;h2 id=&quot;리액트를-배우려고-하는-이유&quot;&gt;리액트를 배우려고 하는 이유&lt;/h2&gt;
&lt;p&gt;사실 웹은 Vue로도 내가 원하는 개발이 가능했다 생각보다 짧은 시간에 배울 수 있었고 나름 합리적인 프레임워크라고 생각한다, 그러나 생각보다 Vue유저가 없었다 그렇게 손해 볼일은 아니지만 나름 아쉬웠던 부분이 있다.&lt;/p&gt;

&lt;p&gt;이번에 나는 새로운 프로젝트를 계획하고 있으며 앞으로도 새로운 웹을 출시하고 싶었다. 그러나 사실 대부분의 웹은 시장에 나오면 관심도 못받고 사라지기 일쑤라고 생각한다 모바일 시대이고 기회는 나름 모바일에 있다고 생각이 들었다. 새로운 프로젝트는 그냥 게시판 형식의 간단한 웹이었는데 직접 개발을 하고 나니 ‘과연 누가 이 사이트에 들어올까?’라는 고민이 들었다.&lt;/p&gt;

&lt;p&gt;그래서 첫번째로 찾은 대안은 Framework7이었다 Vue를 지원하는 Cordova기반의 javascript 하이브리드 앱 프레임워크이다.&lt;img src=&quot;/assets/img/postsImg/framework7-logo.png&quot; alt=&quot;프레임워크7의 로고&quot; /&gt;&lt;/p&gt;

&lt;p&gt;열심히 따라서 만들어 봤지만 예제부터가 제대로 동작하지 않았다 머터리얼css를 사용한 예제에선 상단바가 잘못나오는 오류가 나왔다.&lt;/p&gt;

&lt;p&gt;그래서 다시 기웃댄게 안드로이드 웹뷰 시스템이었는데 솔직히 그냥 안드로이드를 입문하는게 차라리 더 났다는 결론까지 내렸다 그리고 PWA로 앱을 포팅하는 것은 상당히 마음에 들지만 구독 모델이나 결제 같은게 일단은 지원하지 않기에 별로였다.&lt;/p&gt;

&lt;p&gt;그래서 찾은 것이 &lt;strong&gt;‘React native’&lt;/strong&gt; 그러나 리액트는 생각보다 어려운 문법 처럼 보였다..크흠…&lt;/p&gt;

&lt;h2 id=&quot;정리를-해보자&quot;&gt;정리를 해보자&lt;/h2&gt;
&lt;p&gt;오늘 Udemy에 할인 중인 강좌를 하나 구매해서 약 33강의 까지 들었다 해당 강좌를 진행하는 분도 지금까지 배운게 리액트에 기초라고 말씀하셨으며 다음 장으로는 React Redux가 시작된다고 한다. 나름 합리적인 데이터의 관리를 위해서라고 했으니 데이터 관리가 쉬워질까? 라는 생각도 들지만&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;아마도 그럴것 같진않다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;p&gt;JSX는 자바스크립트의 문법이라기 보다는 react의 문법이며 babel을 통해 컴파일하면 react.createElemnt(~~~~)등으로 변환되는 것으로 봐서 JSX는 갓갓 문법이다&lt;/p&gt;

&lt;p&gt;ReactDom은 내가 현재 웹을 다루고 있기에 사용하고 있으며 React native에서는 ReactView를 다루게 된다.
Dom은 실제 우리에게 보여지는 Html을 뜻하며 React의 문법으로 Html을 컨트롤 할 수 있다.&lt;/p&gt;

&lt;p&gt;React는 이벤트의 발생을 기존 Html에서 했던것과 비슷하게 감지한다 예를들면 onClick등의 이벤트는 똑같으며 이벤트 받는것고 기존에 했던것과 동일했다,&lt;/p&gt;

&lt;p&gt;State가 바뀌면 render가 다시된다는 것이 중요해 보였으며 constactor에 props를 super(props)로 해주는 것은 솔직히 잘 이해가 되지 않았지만 클래스의 생성자를 위해서 사용한다고 이해하게되었다.&lt;/p&gt;

&lt;p&gt;문법적 설탕 -&amp;gt; Syntax sugar 문법 개꿀 이라는 뜻인것 같고 예를 들면 내가 선언할 변수의 이름과 받아올 오브젝트의 이름이 같아면 그냥 ({video})라고만 해줘도 알아서 const video에 해당 오브젝트를 대입시켜준다.&lt;/p&gt;

&lt;p&gt;사실 위와 같은 부분을 익히는 것도 중요하지만 결국엔 필요한 기능을 적재적소에 찾는것이 중요한것 같다&lt;/p&gt;

&lt;p&gt;lodash를 사용해 함수의 시간초를 주는 것도 마지막에 설명하였는데 신기한점은 먼저 선언되었던 function명으로 똑같이 상수 함수를 만들었다는 점이다 그런데도 동작한다는 것이 오히려 이해가 안되게 만들었지만 이것 또한 하나의 패턴으로 기억해야 할 것같 다.&lt;/p&gt;

&lt;h2 id=&quot;입문-난이도는&quot;&gt;입문 난이도는?&lt;/h2&gt;
&lt;p&gt;솔직히 내가 먼저 Vue나 Andgular를 접해보지 않았다면 이게 무슨 개소리야 하고 껏겠지만 다행히 Vue를 접하고 입문해서 그런지 아니면 내가 평소에 서점에서 react 책만보이면 잠깐 잠깐 보던게 도움이 된지는 모르겠지만,&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;상당히 합리적인 프레임워크라는 생각이 들었다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;react는-어디에서나-사용되고-있다&quot;&gt;React는 어디에서나 사용되고 있다&lt;/h2&gt;
&lt;p&gt;사실 리액트를 배워야겠다고 마음먹게된 가장 큰 이유가 이것이다. 내가 자주 시청하는 트위치부터 자주쓰는 에버노트…그리고 papago번역기 까지 Dom의 변화가 자주있는 앱이라면 대부분 리액트를 사용 중이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;그들이 사용하는 데에는 이유가 있다고 생각했다.&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><category term="React" /><category term="Learn" /><summary type="html">리액트를 배우려고 하는 이유 사실 웹은 Vue로도 내가 원하는 개발이 가능했다 생각보다 짧은 시간에 배울 수 있었고 나름 합리적인 프레임워크라고 생각한다, 그러나 생각보다 Vue유저가 없었다 그렇게 손해 볼일은 아니지만 나름 아쉬웠던 부분이 있다.</summary></entry><entry><title type="html">서버리스에 관하여</title><link href="/development/tech/what-is-serverless" rel="alternate" type="text/html" title="서버리스에 관하여" /><published>2018-01-08T00:00:00+09:00</published><updated>2018-01-08T00:00:00+09:00</updated><id>/development/tech/what-is-serverless</id><content type="html" xml:base="/development/tech/what-is-serverless">&lt;p&gt;나는 최근에 firebase에 관한 얘기를 개발자들의 세미나에서 얘기한 경험이 있다,&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;서버리스의 대표적 선두주자이면서 상당히 관리하기 편리하기에 서버에 지식이 없는 사람도 쉽게 입문해서 자신이 원하는 앱을 만들어 낼 수 있기에 지금처럼 변화가 빠른 세상에서 빠르게 개발하기에는 정말 최고의 서비스&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;의견은 다소 나뉘었는데, 그 중에서 이해가 안되는 부분이 있는데 느려터져먹었으며 그딴걸 누가 사용하냐는 다소 과격한 언행이 나오기 시작했다.
나는 파이어베이스를 사용은 해봤냐고 묻고싶다 그리고 firebase가 과연 어떤 서비스를 제공하는지 대충이라도 알고 나의 얘기에 토를 달았으면 좋겠다.&lt;/p&gt;

&lt;h2 id=&quot;1-파이어베이스가-제공하는-것&quot;&gt;1. 파이어베이스가 제공하는 것&lt;/h2&gt;
&lt;p&gt;우선 파이어베이스가 무엇을 제공하느냐를 알아야 할 필요가 있다 파이어베이스하면 단순히 리얼타임 데이터베이스만 생각하는 사람도 많을 것이다 나도 처음엔 그랬으니까&lt;/p&gt;

&lt;p&gt;그러나 파이어베이스는 단순히 데이터베이스만 제공하는 서비스가 절대로 아니다 일단 데이터베이스부터 언급하자면 데이터베이스는 실시간으로 조회되며 연결된 데이터베이스가 변경될시 observer패턴을 사용한 데이터베이스 이기에 바로바로 변경점을 해당 노드에 연결된 사용자에게 알려주는 그런 서비스다.&lt;/p&gt;

&lt;p&gt;즉 요즘 유행하는 가상화폐에서 사용한다면 생각보다 큰 부하없이도 데이터베이스를 가져올 수 있다&lt;/p&gt;

&lt;p&gt;그 밖에도 Authentication 서비스는 클릭 몇번과 폼데이터 입력 한번으로 google로그인과 이메일 로그인을 연동 시킬 수 있으며&lt;/p&gt;

&lt;p&gt;Storage 서비스는 말그대로 파일을 서버에서 호스팅할 수 있으며&lt;/p&gt;

&lt;p&gt;Hosting 서비스는 firebase deploy 한번으로 vue나 react로 작성된 앱을 별다른 설정없이도 호스팅 할 수 있고&lt;/p&gt;

&lt;p&gt;마지막으로 &lt;strong&gt;functions&lt;/strong&gt; 서비스는 node.js로 작성된 코드를 업로드시켜두면 어디서나 사용할 수 있는 node.js 서버로 활용이 가능하다, 간단하게 말하자면 Nodemailer라는 모듈을 임포트 시켜 굳이 서버를 가지고 있지않아도 메일을 보낼 수 있다는 얘기다(ajax)&lt;/p&gt;

&lt;p&gt;이 밖에도 보안과 유저 분석을 제공한다.&lt;/p&gt;

&lt;h2 id=&quot;2-파이어베이스로-할-수-있는것&quot;&gt;2. 파이어베이스로 할 수 있는것&lt;/h2&gt;
&lt;p&gt;사실 파이어베이스 자체를 가지고 커뮤니티를 만들겠다고 한다면 조금은 반대하고 싶다 NoSql기반의 데이터베이스는 제목 검색도 하기 힘들기 때문이다, 여기에서 누군가는 얘기한다 “그딴 쓰레기 서버 누가쓰냐고” 아니 대체 왜 제대로 알지도 않고..크흠..&lt;/p&gt;

&lt;p&gt;파이어베이스 자체로서 쓴다면 사실 사용처가 제약적인건 사실이다 그러나 &lt;a href=&quot;https://console.cloud.google.com/&quot;&gt;Google Cloud Platform&lt;/a&gt;에 들어가보자 Mysql부터 많은 서비스가 제공되고있다.&lt;/p&gt;

&lt;p&gt;파이어베이스 functions로 Mysql 연결후 커뮤니티를 만든다면 한글 제목도 검색되며 괜찮은 커뮤니티를 제공 할 수 있을것이다.&lt;/p&gt;

&lt;h2 id=&quot;3-사용해보고-욕합시다&quot;&gt;3. 사용해보고 욕합시다&lt;/h2&gt;
&lt;p&gt;대부분 파이어베이스가 어떤 서비스도 제공하는지도 모르며 느려터진 서비스라고 욕을하던데.. 대체 어떤 서비스가 느리다는 건지 잘모르겠다 리얼타임 데이터베이스를 정말 제자리에서 사용하고 있는건가? 리얼타임 데이터베이스가 느리다고 느꼇다면 아마도 처음부터 해당앱이 어떤 기능을 제공해야하고 어떤 데이터베이스를 사용하는지 이해하는것이 필요하다.&lt;/p&gt;

&lt;h2 id=&quot;4-서버리스에-대해서&quot;&gt;4. 서버리스에 대해서&lt;/h2&gt;
&lt;p&gt;서버는 말 그대로 서버가 존재하지 않는 서비스를 의미한다 서버가 존재하지 않는다고 서버가 없지는 않은 그러니까 말 장난인 셈인데 위에서 언급했던것과 마찬가지로 필요한 상황이 있으면 paas(platform as a service)를 사용해서 서버를 잠깐 빌려서 쓴다고 보면될것 같다.&lt;/p&gt;

&lt;p&gt;대표적으로 firebase, google colud platform, aws lamda 등이 있다.&lt;/p&gt;

&lt;p&gt;서버리스는 모든걸 다할 수 있는 개발자에게는 어울리지 않는 개념이다, 분명 우리들의 서버는 어제까지 잘 동작하다가 다음날 안되는 경우가 있었다. 분명 어제 까지는 구글로그인이 정말 잘되었는데 여행 출발 당일 알 수 없는 오류를 내뿜으며 로그인이 안되던 나의 앱은 여행을 포기하게 만들었다.&lt;/p&gt;

&lt;p&gt;나는 분명 언급했다시피 개인개발자이다 풀스텍 개발자가 되기로 마음먹고부터는 Node.js 그리고 리눅스의 우분투부터 센토스 등등 정말 중요한것은 내가만든 앱의 재미고 설계지 언제까지 서버 때문에 포기하고 서버의 볼륨을 계산하지 못해서 서버가 끊겨 유저이탈을 경험 할 수 없었다.&lt;/p&gt;

&lt;p&gt;서버리스는 스타트업 그리고 개인개발자라면 분명히 염두해 두어야한다 내가 아무리 코드를 잘짜도 사실 사용자는 별로 관심도 없다 어떤 서버를 어떻게 만들어서 잘 만들어도 그냥 앱이 정말 재미있고 좋은 앱이어야 성공한다&lt;/p&gt;

&lt;p&gt;나는 상당히 많은 시간을 서버에 대한 고민을 하며 개발을 했다 그러나 개인개발자에겐 하루빨리 출시해서 결과를 보는게 중요하다고 생각한다 그러나 서버에 대한 고민 그리고 스토리지에대한 고민까지 그 모든걸 혼자서 풀어내기엔 부담스럽기 그지없다.&lt;/p&gt;

&lt;p&gt;그래서 나는 paas(Platform as a Service)를 사용하고 있다&lt;/p&gt;</content><author><name></name></author><category term="server" /><category term="pass" /><category term="google colud" /><category term="firebase" /><summary type="html">나는 최근에 firebase에 관한 얘기를 개발자들의 세미나에서 얘기한 경험이 있다, 서버리스의 대표적 선두주자이면서 상당히 관리하기 편리하기에 서버에 지식이 없는 사람도 쉽게 입문해서 자신이 원하는 앱을 만들어 낼 수 있기에 지금처럼 변화가 빠른 세상에서 빠르게 개발하기에는 정말 최고의 서비스</summary></entry><entry><title type="html">양산형 게임 - 작성중</title><link href="/game/when-will-stop-mass-games" rel="alternate" type="text/html" title="양산형 게임 - 작성중" /><published>2018-01-01T00:00:00+09:00</published><updated>2018-01-01T00:00:00+09:00</updated><id>/game/when-will-stop-mass-games</id><content type="html" xml:base="/game/when-will-stop-mass-games">&lt;h2 id=&quot;양산형-게임이란&quot;&gt;양산형 게임이란?&lt;/h2&gt;
&lt;p&gt;우선 이 얘기부터 하고 넘어가자 양산형 게임이란, 게임의 특징이 없이 마치 공장에서 생산하듯 모양이 똑같이 기능이 똑같은 경우를 일컫는 말이다. 즉 게임의 개성 소울없이 만든 게임을 양산형 게임이라고 부르는데 아마 이 글을 읽는 여러분들 머리 속에 떠오르는 게임이 몇가지 있듯 싶다.
&lt;img src=&quot;/assets/img/postsImg/폭-풍-전-야.jpeg&quot; alt=&quot;폭풍전야 이미지&quot; /&gt;&lt;/p&gt;

&lt;p&gt;딱히 어떤 게임을 꼭 집어 얘기하지 않아도 대부분 시장에 나오는 게임은 그렇기에….(모바일만 봐도 그렇다 대체 양심 어디?)&lt;/p&gt;

&lt;h2 id=&quot;그-게임을-누가해-ㅋㅋ&quot;&gt;그 게임을 누가해 ㅋㅋ&lt;/h2&gt;
&lt;p&gt;누가 하던데요?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/postsImg/donot.jpeg&quot; alt=&quot;그럼 하지마!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;응 해 ~&lt;/p&gt;

&lt;p&gt;가끔 세상을 살다보면 인터넷과는 다른 현실에 놀라움을 금치 못할때가 많았다. 인터넷 여론과 실제로 인생을 사는 사람들은 크게 많은 차이를 보인다는 것을 여기에서 알 수 있다.&lt;/p&gt;

&lt;p&gt;우리가 인싸 아싸를 구분하듯 인싸들은 정말 이런 게임에 열광 하는건지 아니면 인터넷에선 안하겠다고 못 박던 사람들도 하는지는(일단 나는 안함 ㅎㅎ) 모르겟지만 리니지, 테라, 등등 게임은 대박을 터트리며 연일 구글스토어를 장악한다. 역시 인터넷 세상과 현실은 괴리감이 있다&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/postsImg/play-store.jpeg&quot; alt=&quot;플레이 스토어&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그렇다고 저기 위에 있는 게임을 만든 사람을 비난할 생각은 없다 그러나 게임의 의미가 너무 많이 퇴색되어 가게하는 장본인 이라고 하고싶다.&lt;/p&gt;

&lt;p&gt;내가 처음 게임에 대해서 배우고 개발 할때는 당연히 게임은 게임을 좋아하는 사람이 만든다고 생각했다&lt;/p&gt;

&lt;p&gt;왜냐면 당연하고 당연한 이치이다, 실제로 내가 개발 공부를 하겠다고 게임을 멀리하자 친구는 나에게 주옥같은 말을 던졌는데&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;게임 만드는 놈이 게임을 안하면 게임을 어케 만듬?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;이라는 짧은 말에 배그를 샀다.&lt;/p&gt;

&lt;p&gt;아무튼 “게임 만드는 놈이 게임을 안하면 게임을 어케 만듬?”이라는 짧은 얘기에 게임의 역사가 숨겨져 있다고 생각한다&lt;/p&gt;</content><author><name></name></author><category term="Game" /><category term="FPS" /><category term="양산 게임" /><summary type="html">양산형 게임이란? 우선 이 얘기부터 하고 넘어가자 양산형 게임이란, 게임의 특징이 없이 마치 공장에서 생산하듯 모양이 똑같이 기능이 똑같은 경우를 일컫는 말이다. 즉 게임의 개성 소울없이 만든 게임을 양산형 게임이라고 부르는데 아마 이 글을 읽는 여러분들 머리 속에 떠오르는 게임이 몇가지 있듯 싶다.</summary></entry><entry><title type="html">Jekyll로 시작하는 블로그 - 에필로그</title><link href="/development/blog/first-blog-with-github-and-jekyll3" rel="alternate" type="text/html" title="Jekyll로 시작하는 블로그 - 에필로그" /><published>2017-12-26T00:00:00+09:00</published><updated>2017-12-26T00:00:00+09:00</updated><id>/development/blog/first-blog-with-github-and-jekyll3</id><content type="html" xml:base="/development/blog/first-blog-with-github-and-jekyll3">&lt;h2 id=&quot;한것도-없이-마지막&quot;&gt;한것도 없이 마지막&lt;/h2&gt;
&lt;p&gt;그렇다 마지막이다 너무 두서 없이 쓴거같고 그냥 휘겨 갈겨 쓴것 같아서 빨리 마무리를 지어야겠다&lt;/p&gt;

&lt;h2 id=&quot;1-jekyll의-liquid-시스템을-대충-알아보자&quot;&gt;1. Jekyll의 Liquid 시스템을 대충 알아보자&lt;/h2&gt;
&lt;p&gt;지킬의 친절한 &lt;a href=&quot;https://jekyllrb-ko.github.io/docs/variables/&quot;&gt;안내 페이지&lt;/a&gt;를 보면 알 수있지만 Liquid 템플릿 시스템(이는 대부분 블로그 플랫폼이 지원하는 언어)이 적용되어있는데 예를들면 _config.yml파일에 name : “Moonjong93”이라고 적용 해두면 어느 페이지에서건&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;site.name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;과 같은 변수로 접근이 가능하다 아주 편리한 시스템인데 이 블로그의 레이아웃을 잠깐 보자면&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&quot;main-container&quot;&amp;gt;
    include top.html
    content
    include copy.html
    include analytics.html
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;이런식으로 이루어진 코드가 상당히 많다&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;include는 data안에 넣어둔 파일을 넣을 경우 사용&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;필요할때마다 코드를 불러와서 쓰는건 상당히 불편한데 위와같은 템플릿도 지원하기 때문에 상당히 쉽게 만들 수 있었다.&lt;/p&gt;

&lt;p&gt;예를들면 위에서 top.html을 include하였는데 모든 페이지에서 상단에 있는 ‘Moonjong93과 Abuout’에 접근할 수 있게끔 하나만 만들어두고 어느 레이아웃에도 추가해두었다.&lt;/p&gt;

&lt;h2 id=&quot;2-레이아웃이란&quot;&gt;2. 레이아웃이란?&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;---
layout: index
title : Welcome
--- 
&amp;lt;div class=&quot;container&quot;&amp;gt;
    &amp;lt;div calss=&quot;posts&quot;&amp;gt;
        for post in paginator.posts
        &amp;lt;div class=&quot;post&quot;&amp;gt;
            &amp;lt;a href=&quot; post.url &quot;&amp;gt;&amp;lt;h3 class=&quot;post-title&quot;&amp;gt;post.title&amp;lt;/h3&amp;gt;&amp;lt;/a&amp;gt;
            &amp;lt;p class=&quot;post-subscript&quot;&amp;gt;post.subscript&amp;lt;/p&amp;gt;
            &amp;lt;p class=&quot;post-date&quot;&amp;gt;post.date | date: '%Y-%m-%d'&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        endfor
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위는 이 페이지에 index즉 제일 첫 페이지 코드의 일부분인데 보면 알다시피 레이아웃은 index 레이아웃을 통한다 index 레이아웃은 모든 전체적인 폼만을 만든다 분리를 하게되면 효율적이게 코드관리가 가능하다&lt;/p&gt;

&lt;p&gt;예를들면 모든 페이지에서 필요한 공통부분은 레이아웃에 미리 저장해둔다 그리고 head태그 역시 레이아웃에 정의해둔다 &lt;strong&gt;변경 되는 부분은 reqiurd 템플릿 문법으로 정의한다&lt;/strong&gt;
페이지 별로 보여지는 title이 다를경우&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: index
title : &quot;hello&quot; // 이 부분을 수정해서 가능해진다
--- 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이런식으로 편리한 템플릿을 제공하기에 기본 문서만 본다면 누구나 블로그를 만들 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;3-검색엔진-최적화는&quot;&gt;3. 검색엔진 최적화는?&lt;/h2&gt;
&lt;p&gt;처음 이 블로그를 올리고 1주일은 아무글도 구글에 검색되지 않았다 그래서 우선은 네이버 웹마스터를 통해 부족한 부분을 보완했다.
&lt;img src=&quot;/assets/img/postsImg/naver-web-master.png&quot; alt=&quot;네이버 웹마스터 결과 값&quot; /&gt;&lt;/p&gt;

&lt;p&gt;가장 중요했던 부분은 RSS나 sitemap의 제출인데 이것은 _config.yml파일에&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plugins:
  - jekyll-feed
  - jekyll-sitemap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;구문만 있으면 알아서 생성해주기에 상당히 편했다 바로 어제 저렇게 해서 네이버 웹마스터 최적화 이후 구글에서도 웹마스터 등록후 최적화를 진행했는데 현재 구글 검색결과에 잘 표시되는 것을 확인 할 수 있다&lt;/p&gt;

&lt;p&gt;검색은 Moonjong93으로 하였다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/postsImg/google-serach-after.png&quot; alt=&quot;최근 구글 검색결과 Moonjong93으로&quot; /&gt;&lt;/p&gt;

&lt;p&gt;몇줄의 코드만으로도 검색엔진 친화적 블로그가 완성되었다&lt;/p&gt;

&lt;h2 id=&quot;4-기타-플러그인&quot;&gt;4. 기타 플러그인&lt;/h2&gt;
&lt;p&gt;댓글은 disqus를 사용하고 있다. 커스터 마이징이 사실 거의 불가능하다 싶은데 최근 댓글 목록같은 경우엔 데이터를 조회해서 가져온뒤 css파일로 수정했다.&lt;/p&gt;

&lt;p&gt;댓글에 어느 페이지에서 작성했는지 까지 나오기 때문에 보기가 조금 지저분하다고 느껴서 아예 dispaly: none을 해두고 a태그만 가져온뒤 다시 위에 덮어씌워서 처리했다&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.querySelectorAll('li.dsq-widget-item').forEach(function(me){
    var atag = document.createElement('a');
    atag.innerHTML = me.innerHTML;
    atag.setAttribute('class','dsq-coment');
    atag.setAttribute('href',me.childNodes[5].childNodes[2].href);
    me.parentNode.insertBefore(atag, me);
    me.remove();
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;물론 jquery를 사용하면 상당히 편하게 되겟지만 이번 블로그에서는 jquery를 아예 사용하지 않고 만들고 있다.&lt;/p&gt;

&lt;p&gt;그리고 구글의 애널리틱스는 마찬가지로 include폴더에 다운로드 해서 모든 페이지에 inlcude 시켜주었다.&lt;/p&gt;

&lt;h2 id=&quot;5-마무리-하며&quot;&gt;5. 마무리 하며&lt;/h2&gt;
&lt;p&gt;사실 마크업도 모르는 놈이 마크업으로 된 블로그를 만들기까지 굳이 필요없는 짓거리를 이것저것 했다(firebase with vue.js를 하면서)그러나 분명한건 완전히 헛짓거리는 아닌게 이번 경험을 통해 검색엔진을 신경쓰기 위해서 포기해야할 일이라던지(아무도 안보는 블로그가 대체 무슨 쓸모가..) 사용자 친화적 이라기보다 검색봇 친화적인 태그 사용등을 경험하며 사람들이 많이 쓰는 블로그 ex)티스토리, 워드프레스에는 그럴만한 이유가 있다는 생각이 들었다.&lt;/p&gt;

&lt;p&gt;! 감사합니다 !&lt;/p&gt;</content><author><name></name></author><category term="Jekyll" /><category term="Blog" /><summary type="html">한것도 없이 마지막 그렇다 마지막이다 너무 두서 없이 쓴거같고 그냥 휘겨 갈겨 쓴것 같아서 빨리 마무리를 지어야겠다</summary></entry><entry><title type="html">Jekyll로 시작하는 블로그 - 중간</title><link href="/development/blog/first-blog-with-github-and-jekyll2" rel="alternate" type="text/html" title="Jekyll로 시작하는 블로그 - 중간" /><published>2017-12-26T00:00:00+09:00</published><updated>2017-12-26T00:00:00+09:00</updated><id>/development/blog/first-blog-with-github-and-jekyll2</id><content type="html" xml:base="/development/blog/first-blog-with-github-and-jekyll2">&lt;h2 id=&quot;1-웹-개발은-디자인-부터&quot;&gt;1. 웹 개발은 디자인 부터&lt;/h2&gt;
&lt;p&gt;어느정도 프로토타입은 정해두었다. 사실 처음과 지금의 결과물은 상당히 다르다 처음엔 노트형식의 디자인을 기획하게 되었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/postsImg/jekyll-blog-with-github-prototype.png&quot; alt=&quot;이 블로그의 프로토타입&quot; /&gt;&lt;/p&gt;

&lt;p&gt;정말 자주 사용하는 시스템이 있는데 바로 &lt;a href=&quot;https://www.evernote.com&quot;&gt;Evernote&lt;/a&gt;이다 지금도 아이디어를 정리할때 사용하고 있는데 벌써 노트의 수가 70개에 육박한다 상당히 좋은 시스템이고 편리하기 때문에 내가 만약 블로그를 만들때 이렇게 보기 편하면 좋다고 생각햇다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;그러나 에버노트 형식의 블로그의 단점은 분명했다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;일단은 검색 최적화가 힘들었다 노트를 클릭하면 내가 작성한 글들을 모아놓은 데이터를 보고 싶었는데 Jekyll의 시스템상 썸네일 그리고 짧은 글 요약 등을 저장하기가 상당히 귀찮기 때문에 노트 형식의 블로그는 포기하게 되었다.&lt;/p&gt;

&lt;h2 id=&quot;2-컬러를-정하자&quot;&gt;2. 컬러를 정하자&lt;/h2&gt;
&lt;p&gt;예전엔 레이아웃부터 생각햇다면 지금은 컬러부터 정하게 되는것 같다, 메인이 되는 색상인 연분홍 느낌의 #fe9f9f 컬러부터 시작으로 색을 정하게 되었다, 대부분의 글들은 완전한 블랙보다는 #333 ~ 777을 오고가며 만들었다 내 기준에서는 그렇게 하는 부분이 눈이 편하다고 느꼇기 때문이다.&lt;/p&gt;

&lt;p&gt;그렇게 만들어진 블로그의 색상표는 대략적으로&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;강조 - 이 블로그의 메인 색상 그리고 강조에 사용
    &lt;ul&gt;
      &lt;li&gt;컬러표 : #fe9f9f&lt;/li&gt;
      &lt;li&gt;사용처 : 아이덴티티&lt;/li&gt;
      &lt;li&gt;느낌 : 소프트 핑크 (크흠)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;본문 글자색 - 눈이 편한 색상을 사용
    &lt;ul&gt;
      &lt;li&gt;컬러표 : #1b1f29&lt;/li&gt;
      &lt;li&gt;사용처 : 본문&lt;/li&gt;
      &lt;li&gt;느낌 : 그나마 눈이 편한 색 조금 빠진 검정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;H 태그 색상 - 눈이 편한 검정, 두께는 700정도
    &lt;ul&gt;
      &lt;li&gt;컬러표 : #4a4a4a&lt;/li&gt;
      &lt;li&gt;사용처 : H 태그&lt;/li&gt;
      &lt;li&gt;느낌 : 눈이 조금 편한, 조금 색 빠진 검정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이런식으로 컬러표를 정해서 디자인에 나섰다&lt;/p&gt;

&lt;h2 id=&quot;3-레이아웃을-정하자&quot;&gt;3. 레이아웃을 정하자&lt;/h2&gt;
&lt;p&gt;index.html 즉 메인이 되는 레이아웃을 먼저 짜야 했다, 레이아웃은 상당 부분 evernote의 영향을 많이 받았다, 기존에는 좌측에서 열리는 notes의 목록으로 선택해서 해당 포스트에 들어가는 정말 나의 노트를 훔처보는 느낌으로 디자인 하고 싶었다.&lt;/p&gt;

&lt;p&gt;그러나 글씨의 미리보기나 위에서 내려오는 무엇을 사용하더래도 굳이 써야할 이유를 느끼지 못했다 왜냐면 글의 미리보기가 너무 많으면 검색결과에 노출이 안되기 때문에 그리고 썸네일등 힘든게 많기 때문에 목록에서 선택하는 부분을 조금 바꿔서 만들게 되었다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;그러나 글이 많아지면 아무런 의미가 없을것 같다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;4-처음-만나는-ruby&quot;&gt;4. 처음 만나는 Ruby?&lt;/h2&gt;
&lt;p&gt;그러나 아예 Ruby언어를 모르는 나에게는 조금 어렵게 다가왔다 그러나 대부분의 문법은 ejs에서 사용해본 것들과 비슷했다 물론 Vue.js와도 말이다&lt;/p&gt;

&lt;p&gt;지킬 공식 가이드북을 가면 자세히 나와있다 가령 - page.title 이라는 간단한 코드로도 타이틀을 가져올 수 있다 이미 내부적으로 그런 모든것들이 다 구현되어있기 때문인데 이런 점들이 지킬에 블로그를 올리는데 정말 많은 도움이 된다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/moonjong93/moonjong93.github.io&quot;&gt;깃허브&lt;/a&gt; 이곳에 방문하면 모든 코드가 보관 중이니… 굳이 보고 싶으시다면 보시는것도 추천한다&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;다음 글은 이제 코드를 보면서 마지막으로 어떻게 만들었는지 알아보겠다.&lt;/p&gt;</content><author><name></name></author><category term="Jekyll" /><category term="Blog" /><summary type="html">1. 웹 개발은 디자인 부터 어느정도 프로토타입은 정해두었다. 사실 처음과 지금의 결과물은 상당히 다르다 처음엔 노트형식의 디자인을 기획하게 되었다.</summary></entry><entry><title type="html">Jekyll로 시작하는 블로그 - 프롤로그</title><link href="/development/blog/first-blog-with-github-and-jekyll" rel="alternate" type="text/html" title="Jekyll로 시작하는 블로그 - 프롤로그" /><published>2017-12-25T00:00:00+09:00</published><updated>2017-12-25T00:00:00+09:00</updated><id>/development/blog/first-blog-with-github-and-jekyll</id><content type="html" xml:base="/development/blog/first-blog-with-github-and-jekyll">&lt;h2 id=&quot;1-시작은-창대하였으나-끝은-미약하다&quot;&gt;1. 시작은 창대하였으나 끝은 미약하다&lt;/h2&gt;

&lt;p&gt;맨 처음 블로그를 만드려고 마음을 먹었을때 생각은 ‘전부다 내가 만들거야!!’라고 생각했다 마치 아따아따의 단비처럼 말이다. 그러나 알지 못했다 그 일이 상당히 무거운 일임을,&lt;/p&gt;

&lt;p&gt;사실 이번 포스팅엔 잘 하면 Jekyll에 관한 언급은 안들어갈지도 모른다 왜냐면 정말 긴 시간을 할애하고 나서야 비로소 Jekyll에 블로그를 하겠다고 마음을 먹었기 때문이다.&lt;/p&gt;

&lt;h2 id=&quot;2-vuejs와-firebase를-사용해서-블로그를-만들자&quot;&gt;2. Vue.js와 Firebase를 사용해서 블로그를 만들자!&lt;/h2&gt;

&lt;p&gt;그렇다 내가 근 한주를 소비하게된 바보같은 생각이었다, 물론 사실 완성 근처 간계까지 갔다 여기서 잠깐, Firebase에 대해서 잠깐 언급하자면 리얼타임 Database를 서버사이드 없이 프론트엔드에서만으로도 조작이 가능하며 그런 서비스를 제공하는 업체이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/postsImg/vue-and-firebase.png&quot; alt=&quot;vue.js logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아무튼 나는 Vue.js를 입문하면서 무언가 하나 그리고 나름 괜찮은 시스템을 만들어보고 싶었다, 프레임워크에 입문하면 열심히 문서를 뒤지는 것보다는 개인적으로는 직접 프로젝트를 하면서 느끼는게 좋다고 생각해서 그런 생각을 하게 되었는데 결과적으로 블로그를 만드는데는 그런 플랫폼을 이용하는게 좋다 워드프레스나 티스토리,텀블러,네이버 등 정말 많은 플랫폼이 있는데 나는 굳이…. 내가 직접 만들어 쓰겠다고 생각했다, 그러나 상당히 불편한 점이 많았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/postsImg/almost-blog-with-vue.png&quot; alt=&quot;만드려고 했던 블로그의 거의 완성본&quot; /&gt;&lt;/p&gt;
&lt;center&gt;&amp;lt; 나름 이미지 삽입도 넣으며 준수한 기능을 만들었다&amp;gt;&lt;/center&gt;

&lt;p&gt;contenteditable - 태그를 활용해서 이미지 삽입이나 좌우 정렬 그리고 태그부분까지 만들고 실제로 글도 잘 올라가며 &lt;a href=&quot;https://support.google.com/webmasters/answer/6066468?hl=ko&quot;&gt;구글 크롤러 테스트&lt;/a&gt;에도 잘 노출이 됨을 확인 할 수 있었다. 그러나 이제 배포만 하면 되는 순간에서 생각해 보니 문서 편집기능도 마음에 들지않고 무엇보다 글의 정보를 동기적으로 가져오다보니(firebase) 굳이 이렇게 까지 만들 필요가 있나? 라는 생각이 들었다&lt;/p&gt;

&lt;p&gt;일단은 검색에 누락될 확률이 정말 높다, 그리고 이를 제외해도 Vue.js는 서버사이드 렌더링이 없다면 크롤러 대부분은 이 사이트에 무슨 글이 있는지도 인식하지 못한다 물론 서버사이드 렌더링을 하면 된다지만 그럴거면 왜 굳이 처음부터 Firebase를….&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;필요 없는 기능이 너무 덕지덕지 있다면 그냥 새로 만드는게 났다는 결론이 났다&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;3-그렇게-정하게된-jekyll&quot;&gt;3. 그렇게 정하게된 Jekyll&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/postsImg/jekyll-logo.png&quot; alt=&quot;jekyll logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;사실 Jekyll이 사용하는 Ruby는 정말 생소한 언어였다 물론 오며가며 들어본 경험은 있다 그러나 일본의 개발자가 만들었다는 얘기 정도기에 거의 모르는 수준이었다 그러나 약 3일간의 투자로 이 블로그를 만들 수 있게 되었다.&lt;/p&gt;

&lt;p&gt;Jekyll의 가이드는 사실 &lt;a href=&quot;https://jekyllrb-ko.github.io/&quot;&gt;지킬의 공식문서&lt;/a&gt;만 보면 모든게 이해가 가능하다, 그리고 레퍼런스 삼을 테마를 하나 구하면 좋은데 나는 엄청 심플한 &lt;a href=&quot;http://jekyllthemes.org/themes/windows-95/&quot;&gt;windows95-Theme&lt;/a&gt;를 레퍼런스 삼아 작업을 했다.&lt;/p&gt;</content><author><name></name></author><category term="Jekyll" /><category term="Blog" /><summary type="html">1. 시작은 창대하였으나 끝은 미약하다</summary></entry></feed>